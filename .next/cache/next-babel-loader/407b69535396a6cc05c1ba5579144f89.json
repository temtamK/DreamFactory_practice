{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n// import react\nimport React, { Component } from \"react\"; // import layout\n\nimport Layout from \"../../components/layout\"; // import DreamStory instance\n\nimport dream_story from \"../../ethereum/dream_story\"; // import Form, Button from semantic-ui-react\n\nimport { Card, Icon } from \"semantic-ui-react\"; // import Grid, Input, Form, Message, Button\n\nimport { Grid, Input, Form, Message, Button } from \"semantic-ui-react\"; // import Container and Header\n\nimport { Container, Header } from \"semantic-ui-react\"; // class based component\n\nclass StoryDetails extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onContribute\", async () => {\n      // block default submitting the form\n      event.preventDefault(); // set button loading and clear error message\n\n      this.setState({\n        loading: true,\n        error_msg: \"\"\n      }); // catch any error while executing the following\n\n      try {\n        // get all accounts of a user and use the accounts[0] to contribute\n        const accounts = await web3.eth.getAccounts(); // get the DreamStory instance of the address\n\n        const story = dream_story(this.props.address); // convert contribute price to wei\n\n        const contribute_price_wei = web3.utils.toWei(this.state.contribute_price, \"ether\"); // call contribute function using the user's first account\n        // use metamask's functinality to estimate the gas limit\n\n        await story.methods.contribute().send({\n          from: accounts[0],\n          value: contribute_price_wei\n        }); // refresh the current page, so the getInitialProps re-runs\n\n        Router.replaceRoute(`/dream_stories/${this.props.address}`);\n      } catch (error) {\n        this.setState({\n          error_msg: error.message\n        });\n      } // clear loading\n\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  // get initial properties\n  // the DreamStory address can be obtained from the argument props using the url\n  // since the url includes the contract address\n  static async getInitialProps(props) {\n    // get the DreamStory instance of the address\n    const story = dream_story(props.query.address); // get summary of the story\n\n    const summary = await story.methods.getSummary().call(); // return the summary with labels\n\n    return {\n      address: props.query.address,\n      balance: summary[0],\n      votes_count: summary[1],\n      downloads_count: summary[2],\n      min_down_price_wei: summary[3],\n      approvers_count: summary[4],\n      author: summary[5],\n      story_title: summary[6],\n      story: summary[7]\n    };\n  }\n\n  renderActionButtons() {\n    return __jsx(Form, {\n      onSubmit: this.onContribute,\n      error: !!this.state.error_msg\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Amount to contribute\"), __jsx(Input, {\n      label: \"ether\",\n      labelPosition: \"right\",\n      placeholder: \"0.001\",\n      value: this.state.contribute_price,\n      onChange: event => this.setState({\n        contribute_price: event.target.value\n      })\n    })), __jsx(Message, {\n      error: true,\n      header: \"Failed!\",\n      content: this.state.error_msg\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      primary: true\n    }, \"Contribute\"), __jsx(\"p\", null), __jsx(Link, {\n      route: `/dream_stories/${this.props.address}/downloads_list`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      primary: true\n    }, \"View Downloads\"))), __jsx(\"p\", null), __jsx(Link, {\n      route: `/dream_stories/${this.props.address}/request_download`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      primary: true\n    }, \"Request Download\"))));\n  } // event handler for contribute button\n\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"h2\", null, \"Story Details\"), __jsx(Grid, null, __jsx(Grid.Column, {\n      width: 10\n    }, __jsx(Container, {\n      text: true\n    }, __jsx(Header, {\n      as: \"h3\"\n    }, this.props.story_title), __jsx(\"p\", null, this.props.story))), __jsx(Grid.Column, {\n      width: 6\n    }, __jsx(Card, null, __jsx(Card.Content, {\n      header: \"Statistics\"\n    }), __jsx(Card.Content, {\n      extra: true\n    }, __jsx(Icon, {\n      name: \"dollar sign\"\n    }), this.props.balance, \" (balance, ether)\"), __jsx(Card.Content, {\n      extra: true\n    }, __jsx(Icon, {\n      name: \"user\"\n    }), this.props.votes_count, \" (votes)\"), __jsx(Card.Content, {\n      extra: true\n    }, __jsx(Icon, {\n      name: \"download\"\n    }), this.props.downloads_count, \" (downloads)\"), __jsx(Card.Content, {\n      extra: true\n    }, __jsx(Icon, {\n      name: \"cart arrow down\"\n    }), this.props.min_down_price, \" (download price, ether )\")), this.renderActionButtons())));\n  }\n\n} // export the component\n\n\nexport default StoryDetails;","map":{"version":3,"sources":["c:/Practice/DreamFactory_practice/pages/dream_stories/story_details.js"],"names":["React","Component","Layout","dream_story","Card","Icon","Grid","Input","Form","Message","Button","Container","Header","StoryDetails","event","preventDefault","setState","loading","error_msg","accounts","web3","eth","getAccounts","story","props","address","contribute_price_wei","utils","toWei","state","contribute_price","methods","contribute","send","from","value","Router","replaceRoute","error","message","getInitialProps","query","summary","getSummary","call","balance","votes_count","downloads_count","min_down_price_wei","approvers_count","author","story_title","renderActionButtons","onContribute","target","render","min_down_price"],"mappings":"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","sourcesContent":["// import react\r\nimport React, { Component } from \"react\";\r\n// import layout\r\nimport Layout from \"../../components/layout\";\r\n// import DreamStory instance\r\nimport dream_story from \"../../ethereum/dream_story\";\r\n// import Form, Button from semantic-ui-react\r\nimport { Card, Icon } from \"semantic-ui-react\";\r\n// import Grid, Input, Form, Message, Button\r\nimport { Grid, Input, Form, Message, Button } from \"semantic-ui-react\";\r\n// import Container and Header\r\nimport { Container, Header } from \"semantic-ui-react\";\r\n\r\n// class based component\r\nclass StoryDetails extends Component {\r\n  // get initial properties\r\n  // the DreamStory address can be obtained from the argument props using the url\r\n  // since the url includes the contract address\r\n  static async getInitialProps(props) {\r\n    // get the DreamStory instance of the address\r\n    const story = dream_story(props.query.address);\r\n    // get summary of the story\r\n    const summary = await story.methods.getSummary().call();\r\n    // return the summary with labels\r\n    return {\r\n      address: props.query.address,\r\n      balance: summary[0],\r\n      votes_count: summary[1],\r\n      downloads_count: summary[2],\r\n      min_down_price_wei: summary[3],\r\n      approvers_count: summary[4],\r\n      author: summary[5],\r\n      story_title: summary[6],\r\n      story: summary[7]\r\n    };\r\n  }\r\n\r\n  renderActionButtons() {\r\n    return (\r\n      <Form onSubmit={this.onContribute} error={!!this.state.error_msg}>\r\n        <Form.Field>\r\n          <label>Amount to contribute</label>\r\n          <Input\r\n            label=\"ether\"\r\n            labelPosition=\"right\"\r\n            placeholder=\"0.001\"\r\n            value={this.state.contribute_price}\r\n            onChange={event =>\r\n              this.setState({ contribute_price: event.target.value })\r\n            }\r\n          />\r\n        </Form.Field>\r\n        <Message error header=\"Failed!\" content={this.state.error_msg} />\r\n        <Button loading={this.state.loading} primary>\r\n          Contribute\r\n        </Button>\r\n        <p></p>\r\n        <Link route={`/dream_stories/${this.props.address}/downloads_list`}>\r\n          <a>\r\n            <Button primary>View Downloads</Button>\r\n          </a>\r\n        </Link>\r\n        <p></p>\r\n        <Link route={`/dream_stories/${this.props.address}/request_download`}>\r\n          <a>\r\n            <Button primary>Request Download</Button>\r\n          </a>\r\n        </Link>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  // event handler for contribute button\r\n  onContribute = async () => {\r\n    // block default submitting the form\r\n    event.preventDefault();\r\n    // set button loading and clear error message\r\n    this.setState({ loading: true, error_msg: \"\" });\r\n    // catch any error while executing the following\r\n    try {\r\n      // get all accounts of a user and use the accounts[0] to contribute\r\n      const accounts = await web3.eth.getAccounts();\r\n      // get the DreamStory instance of the address\r\n      const story = dream_story(this.props.address);\r\n      // convert contribute price to wei\r\n      const contribute_price_wei = web3.utils.toWei(\r\n        this.state.contribute_price,\r\n        \"ether\"\r\n      );\r\n      // call contribute function using the user's first account\r\n      // use metamask's functinality to estimate the gas limit\r\n      await story.methods.contribute().send({\r\n        from: accounts[0],\r\n        value: contribute_price_wei\r\n      });\r\n      // refresh the current page, so the getInitialProps re-runs\r\n      Router.replaceRoute(`/dream_stories/${this.props.address}`);\r\n    } catch (error) {\r\n      this.setState({ error_msg: error.message });\r\n    }\r\n    // clear loading\r\n    this.setState({ loading: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <h2>Story Details</h2>\r\n        <Grid>\r\n          <Grid.Column width={10}>\r\n            <Container text>\r\n              <Header as=\"h3\">{this.props.story_title}</Header>\r\n              <p>{this.props.story}</p>\r\n            </Container>\r\n          </Grid.Column>\r\n          <Grid.Column width={6}>\r\n            <Card>\r\n              <Card.Content header=\"Statistics\" />\r\n              <Card.Content extra>\r\n                <Icon name=\"dollar sign\" />\r\n                {this.props.balance} (balance, ether)\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <Icon name=\"user\" />\r\n                {this.props.votes_count} (votes)\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <Icon name=\"download\" />\r\n                {this.props.downloads_count} (downloads)\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <Icon name=\"cart arrow down\" />\r\n                {this.props.min_down_price} (download price, ether )\r\n              </Card.Content>\r\n            </Card>\r\n            {this.renderActionButtons()}\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n// export the component\r\nexport default StoryDetails;\r\n"]},"metadata":{},"sourceType":"module"}